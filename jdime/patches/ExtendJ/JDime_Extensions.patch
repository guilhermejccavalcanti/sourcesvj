diff --git a/LICENSE b/LICENSE
index 42bc5cc..0946f35 100644
--- a/LICENSE
+++ b/LICENSE
@@ -1,6 +1,9 @@
-Copyright (c) 2005-2017, ExtendJ Committers
+Original work Copyright (c) 2005-2017, ExtendJ Committers
 All rights reserved.
 
+Modified work Copyright 2013-2015 Olaf Lessenich,
+              Copyright 2017 Georg Seibt
+
 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are
 met:
diff --git a/README.md b/README.md
index 7ff9c46..231fe5e 100644
--- a/README.md
+++ b/README.md
@@ -1,16 +1,28 @@
-ExtendJ
+ExtendJ (Fork for JDime)
 ========
 
-The JastAdd extensible Java compiler.
+The JastAdd extensible Java compiler (JDime flavoured).
+
+Notice: This is a fork of [extendj/extendj](https://bitbucket.org/extendj/extendj).
+
+I basically use this as a backend for my structured merge tool
+[JDime](https://github.com/xai/jdime).
+
+I made my extensions to the project in the form of aspects, which reside in
+files whose name includes the string "JDime".
 
 License & Copyright
 -------------------
 
+The copyright for most portions of the software are held by the original authors:
 * Copyright (c) 2005-2008, Torbj&ouml;rn Ekman
 * Copyright (c) 2005-2016, ExtendJ Committers
 
 All rights reserved.
 
+The copyright for minor extensions of the software (All files whose name
+includes the String "JDime") is held by Olaf Lessenich, 2013-2015.
+
 ExtendJ is covered by the Modified BSD License. The full license text is
 distributed with this software. See the `LICENSE` file.
 
diff --git a/build.xml b/build.xml
index 234ce21..dee0fea 100644
--- a/build.xml
+++ b/build.xml
@@ -174,6 +174,9 @@ Build a standard release:
 			<fileset dir="${bin.dir}">
 				<include name="**/*"/>
 			</fileset>
+			<fileset dir="${src.dir}">
+				<include name="**/*"/>
+			</fileset>
 		</jar>
 	</target>
 
diff --git a/java4/frontend/JDime.jadd b/java4/frontend/JDime.jadd
new file mode 100644
index 0000000..4fb5bf4
--- /dev/null
+++ b/java4/frontend/JDime.jadd
@@ -0,0 +1,195 @@
+/*
+ * Copyright (C) 2013-2015 Olaf Lessenich
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ *   1. Redistributions of source code must retain the above copyright
+ *      notice, this list of conditions and the following disclaimer.
+ *
+ *   2. Redistributions in binary form must reproduce the above
+ *      copyright notice, this list of conditions and the following
+ *      disclaimer in the documentation and/or other materials provided
+ *      with the distribution.
+ *
+ *   3. The name of the author may not be used to endorse or promote
+ *      products derived from this software without specific prior
+ *      written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
+ * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
+ * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
+ * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+ * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Contributors:
+ *     Olaf Lessenich <lessenic@fim.uni-passau.de>
+ */
+aspect JDime {
+
+    /**
+     * Replaces the children of the <code>ASTNode</code>.
+     *
+     * @param newchildren child nodes that should replace the current ones
+     */
+    public void ASTNode.setChildren(ASTNode[] newChildren) {
+
+        if (requiresFixedNumChildren()) {
+            init$Children();
+        } else {
+            numChildren = newChildren.length;
+            children = new ASTNode[newChildren.length];
+        }
+
+        if (children != null) {
+            System.arraycopy(newChildren, 0, children, 0, newChildren.length);
+        }
+
+        for (int i = 0; i < numChildren; i++) {
+            ASTNode child = children[i];
+
+            if (child != null) {
+                child.setParent(this);
+                child.childIndex = i;
+            }
+        }
+    }
+
+    public boolean ASTNode.requiresFixedNumChildren() {
+        /*
+         * In ExtendJ the protected method 'numChildren' of ASTNode is overridden (e.g., 'return 3') if the AST node
+         * expects to have a fixed number of children.
+         */
+
+        try {
+            getClass().getDeclaredMethod("numChildren");
+            return true;
+        } catch (NoSuchMethodException e) {
+            return false;
+        }
+    }
+
+	/**
+	 * Deletes all children of the <code>ASTNode</code>.
+	 */
+	public void ASTNode.removeChildren() {
+		children = null;
+		numChildren = 0;
+	}
+
+	public String ASTNode.jdimeId = "";
+
+	public boolean ASTNode.jdimeChanges = false;
+	public boolean ASTNode.isConflict = false;
+	public boolean ASTNode.isChoice = false;
+
+	public ASTNode<?> ASTNode.left;
+	public ASTNode<?> ASTNode.right;
+	public Map<String, ASTNode<?>> ASTNode.variants;
+
+	/**
+	 * Returns whether this {@link ASTNode} represents a virtual node that should be pretty printed using
+	 * {@link #printVirtualNode(PrettyPrinter)}.
+	 *
+	 * @return whether this {@link ASTNode} should be printed using {@link #printVirtualNode(PrettyPrinter)}
+	 */
+	public boolean ASTNode.isVirtualNode() {
+        return isConflict || isChoice;
+    }
+
+	/**
+	 * Prints this {@link ASTNode} if it represents a virtual node (i.e. a conflict or choice node). The output
+	 * will include appropriate conflict markers of ifdef comments.
+	 *
+	 * @param out the {@link PrettyPrinter} to append to
+	 */
+	public void ASTNode.printVirtualNode(PrettyPrinter out) {
+
+		if (isConflict) {
+			out.printNoIndent("\n<<<<<<< " + (left != null ? left.sourceFile() : "Unknown file: This is a bug in JDime."));
+			out.println();
+
+			if (left != null) {
+				out.print(left);
+				out.println();
+			}
+
+			out.printNoIndent("=======");
+			out.println();
+
+			if (right != null) {
+				out.print(right);
+				out.println();
+			}
+
+			out.printNoIndent(">>>>>>> " + (right != null ? right.sourceFile() : "Unknown file: This is a bug in JDime."));
+			out.println();
+		} else if (isChoice) {
+			java.util.List<String> sortedConditions = new ArrayList<String>(variants.keySet());
+			Collections.sort(sortedConditions);
+			Iterator<String> it = sortedConditions.iterator();
+			String condition = it.next();
+
+			out.printNoIndent("\n");
+			out.printNoIndent("// #ifdef " + condition);
+			out.printNoIndent("\n");
+			out.printNoIndent(variants.get(condition).prettyPrint());
+
+			while (it.hasNext()) {
+				condition = it.next();
+				out.printNoIndent("\n");
+				out.printNoIndent("// #elif " + condition);
+				out.printNoIndent("\n");
+				out.printNoIndent(variants.get(condition).prettyPrint());
+			}
+
+			out.printNoIndent("\n");
+			out.printNoIndent("// #endif");
+			out.printNoIndent("\n");
+		}
+	}
+
+	public String ASTNode.getMatchingRepresentation() {
+		return getClass().getSimpleName() + getTokens();
+	}
+
+	public String ImportDecl.getMatchingRepresentation() {
+		return super.getMatchingRepresentation() + " [" + getAccess().prettyPrint() + "]";
+	}
+
+	public boolean ASTNode.matches(ASTNode other) {
+		return getClass().equals(other.getClass()) && getMatchingRepresentation().equals(other.getMatchingRepresentation());
+	}
+
+	public boolean ASTNode.isOrdered() {
+		return true;
+	}
+
+	public boolean BodyDecl.isOrdered() {
+		return false;
+	}
+
+	public boolean InterfaceDecl.isOrdered() {
+		return false;
+	}
+
+	public boolean ImportDecl.isOrdered() {
+		return false;
+	}
+
+	public boolean Modifier.isOrdered() {
+		return false;
+	}
+
+	public boolean TypeAccess.isOrdered() {
+		// TODO: assert
+		return !(getParent() instanceof List);
+	}
+}
diff --git a/java4/frontend/PrettyPrint.jadd b/java4/frontend/PrettyPrint.jadd
index 2544ac0..6aa3cab 100644
--- a/java4/frontend/PrettyPrint.jadd
+++ b/java4/frontend/PrettyPrint.jadd
@@ -33,11 +33,13 @@
  */
 aspect Java4PrettyPrint {
   public void ArrayAccess.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print("[");
     out.print(getExpr());
     out.print("]");
   }
   public void ArrayCreationExpr.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print("new ");
     out.print(getTypeAccess());
     if (hasArrayInit()) {
@@ -46,6 +48,7 @@ aspect Java4PrettyPrint {
     }
   }
   public void ArrayInit.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print("{ ");
     out.join(getInitList(), new PrettyPrinter.Joiner() {
       @Override
@@ -56,16 +59,19 @@ aspect Java4PrettyPrint {
     out.print(" }");
   }
   public void ArrayTypeAccess.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print(getAccess());
     out.print("[]");
   }
   public void ArrayTypeWithSizeAccess.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print(getAccess());
     out.print("[");
     out.print(getExpr());
     out.print("]");
   }
   public void AssertStmt.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     if (hasMessage()) {
       out.print("assert ");
       out.print(getCondition());
@@ -79,6 +85,7 @@ aspect Java4PrettyPrint {
     }
   }
   public void AssignExpr.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print(getDest());
     out.print(" ");
     out.print(printOp());
@@ -86,12 +93,14 @@ aspect Java4PrettyPrint {
     out.print(getSource());
   }
   public void BasicCatch.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print("catch (");
     out.print(getParameter());
     out.print(") ");
     out.print(getBlock());
   }
   public void Binary.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print(getLeftOperand());
     out.print(" ");
     out.print(printOp());
@@ -99,6 +108,7 @@ aspect Java4PrettyPrint {
     out.print(getRightOperand());
   }
   public void Block.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print("{");
     out.println();
     out.indent(1);
@@ -114,9 +124,11 @@ aspect Java4PrettyPrint {
     out.print("}");
   }
   public void BooleanType.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print("boolean");
   }
   public void BreakStmt.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print("break");
     if (hasLabel()) {
       out.print(" ");
@@ -125,26 +137,32 @@ aspect Java4PrettyPrint {
     out.print(";");
   }
   public void ByteType.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print("byte");
   }
   public void CastExpr.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print("(");
     out.print(getTypeAccess());
     out.print(") ");
     out.print(getExpr());
   }
   public void CharType.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print("char");
   }
   public void CharacterLiteral.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print("'");
     out.print(escapedLiteral());
     out.print("'");
   }
   public void ClassAccess.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print("class");
   }
   public void ClassDecl.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     if (hasDocComment()) {
       out.print(docComment());
     }
@@ -183,6 +201,7 @@ aspect Java4PrettyPrint {
     out.print("}");
   }
   public void ClassInstanceExpr.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print("new ");
     out.print(getAccess());
     out.print("(");
@@ -202,8 +221,13 @@ aspect Java4PrettyPrint {
           @Override
           public void printSeparator(PrettyPrinter out) {
             out.println();
+            out.println();
           }
         });
+        if (!out.isNewLine()) {
+          out.println();
+        }
+        out.indent(1);
         out.print("}");
       } else {
         out.print(" { }");
@@ -211,6 +235,7 @@ aspect Java4PrettyPrint {
     }
   }
   public void CompilationUnit.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     if (hasPackageDecl()) {
       out.print("package ");
       out.print(getPackageDecl());
@@ -234,6 +259,7 @@ aspect Java4PrettyPrint {
     });
   }
   public void ConditionalExpr.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print(getCondition());
     out.print(" ? ");
     out.print(getTrueExpr());
@@ -241,11 +267,13 @@ aspect Java4PrettyPrint {
     out.print(getFalseExpr());
   }
   public void ConstCase.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print("case ");
     out.print(getValue());
     out.print(":");
   }
   public void ConstructorAccess.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print(getID());
     out.print("(");
     out.join(getArgList(), new PrettyPrinter.Joiner() {
@@ -257,6 +285,7 @@ aspect Java4PrettyPrint {
     out.print(")");
   }
   public void ConstructorDecl.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     if (!isImplicitConstructor()) {
       if (hasDocComment()) {
         out.print(docComment());
@@ -304,6 +333,7 @@ aspect Java4PrettyPrint {
     }
   }
   public void ContinueStmt.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print("continue");
     if (hasLabel()) {
       out.print(" ");
@@ -312,6 +342,7 @@ aspect Java4PrettyPrint {
     out.print(";");
   }
   public void Declarator.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print(getID());
     out.print(getDimsList());
     if (hasInit()) {
@@ -320,14 +351,17 @@ aspect Java4PrettyPrint {
     }
   }
   public void DefaultCase.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print("default:");
   }
   public void Dims.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print("[");
     out.print(getExprOpt());
     out.print("]");
   }
   public void DoStmt.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print("do ");
     out.print(getStmt());
     out.print(" while(");
@@ -335,6 +369,7 @@ aspect Java4PrettyPrint {
     out.print(");");
   }
   public void Dot.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     if (needsDot()) {
       out.print(getLeft());
       out.print(".");
@@ -345,22 +380,28 @@ aspect Java4PrettyPrint {
     }
   }
   public void DoubleLiteral.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print(getLITERAL());
   }
   public void DoubleType.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print("double");
   }
   public void EmptyStmt.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print(";");
   }
   public void EmptyType.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print(";");
   }
   public void ExprStmt.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print(getExpr());
     out.print(";");
   }
   public void FieldDecl.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     if (!isSynthetic()) {
       if (hasDocComment()) {
         out.print(docComment());
@@ -381,25 +422,31 @@ aspect Java4PrettyPrint {
     }
   }
   public void FloatType.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print("float");
   }
   public void FloatingPointLiteral.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print(getLITERAL());
   }
   public void InstanceInitializer.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     if (!blockIsEmpty()) {
       out.print(getBlock());
     }
   }
   public void InstanceOfExpr.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print(getExpr());
     out.print(" instanceof ");
     out.print(getTypeAccess());
   }
   public void IntType.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print("int");
   }
   public void InterfaceDecl.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     if (hasDocComment()) {
       out.print(docComment());
     }
@@ -434,30 +481,38 @@ aspect Java4PrettyPrint {
     out.print("}");
   }
   public void LabeledStmt.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print(getLabel());
     out.print(":");
     out.println();
     out.print(getStmt());
   }
   public void Literal.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print(getLITERAL());
   }
   public void LocalClassDeclStmt.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print(getClassDecl());
   }
   public void LongLiteral.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print(getLITERAL());
   }
   public void LongType.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print("long");
   }
   public void MemberClassDecl.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print(getClassDecl());
   }
   public void MemberInterfaceDecl.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print(getInterfaceDecl());
   }
   public void MethodAccess.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print(getID());
     out.print("(");
     out.join(getArgList(), new PrettyPrinter.Joiner() {
@@ -469,6 +524,7 @@ aspect Java4PrettyPrint {
     out.print(")");
   }
   public void MethodDecl.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     if (!isSynthetic()) {
       if (hasDocComment()) {
         out.print(docComment());
@@ -506,9 +562,11 @@ aspect Java4PrettyPrint {
     }
   }
   public void Modifier.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print(getID());
   }
   public void Modifiers.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     if (hasModifier()) {
       out.join(getModifierList(), new PrettyPrinter.Joiner() {
         @Override
@@ -520,26 +578,32 @@ aspect Java4PrettyPrint {
     }
   }
   public void NullType.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print("null");
   }
   public void PackageAccess.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print(getPackage());
   }
   public void ParExpr.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print("(");
     out.print(getExpr());
     out.print(")");
   }
   public void ParameterDeclaration.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print(getModifiers());
     out.print(getTypeAccess());
     out.print(" ");
     out.print(getID());
   }
   public void ParseName.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print(name());
   }
   public void ReturnStmt.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print("return");
     if (hasResult()) {
       out.print(" ");
@@ -548,49 +612,59 @@ aspect Java4PrettyPrint {
     out.print(";");
   }
   public void ShortType.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print("short");
   }
   public void SingleTypeImportDecl.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print("import ");
     out.print(getAccess());
     out.print(";");
     out.println();
   }
   public void StaticInitializer.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     if (!blockIsEmpty()) {
       out.print("static ");
       out.print(getBlock());
     }
   }
   public void StringLiteral.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print("\"");
     out.print(escapedLiteral());
     out.print("\"");
   }
   public void SuperAccess.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print("super");
   }
   public void SwitchStmt.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print("switch (");
     out.print(getExpr());
     out.print(") ");
     out.print(getBlock());
   }
   public void SynchronizedStmt.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print("synchronized (");
     out.print(getExpr());
     out.print(") ");
     out.print(getBlock());
   }
   public void ThisAccess.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print("this");
   }
   public void ThrowStmt.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print("throw ");
     out.print(getExpr());
     out.print(";");
   }
   public void TryStmt.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print("try ");
     out.print(getBlock());
     out.print(" ");
@@ -606,6 +680,7 @@ aspect Java4PrettyPrint {
     }
   }
   public void TypeAccess.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     if (hasPackage()) {
       out.print(getPackage());
       out.print(".");
@@ -613,20 +688,24 @@ aspect Java4PrettyPrint {
     out.print(getID());
   }
   public void TypeImportOnDemandDecl.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print("import ");
     out.print(getAccess());
     out.print(".*;");
     out.println();
   }
   public void Unary.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print(printPreOp());
     out.print(getOperand());
     out.print(printPostOp());
   }
   public void VarAccess.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print(getID());
   }
   public void VarDeclStmt.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print(getModifiers());
     out.print(getTypeAccess());
     out.print(" ");
@@ -639,6 +718,7 @@ aspect Java4PrettyPrint {
     out.print(";");
   }
   public void VoidType.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print("void");
   }
 }
diff --git a/java4/frontend/PrettyPrintUtil.jrag b/java4/frontend/PrettyPrintUtil.jrag
index f9afc3c..f46c675 100644
--- a/java4/frontend/PrettyPrintUtil.jrag
+++ b/java4/frontend/PrettyPrintUtil.jrag
@@ -82,6 +82,7 @@ aspect PrettyPrintUtil {
 
   /** Pretty-print Opt nodes only if they are not empty. */
   public void Opt.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     if (getNumChild() > 0) {
       getChild(0).prettyPrint(out);
     }
@@ -89,6 +90,7 @@ aspect PrettyPrintUtil {
 
   /** Default list pretty printing prints all list elements. */
   public void List.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     for (int i = 0; i < getNumChild(); ++i) {
       getChild(i).prettyPrint(out);
     }
@@ -107,6 +109,7 @@ aspect PrettyPrintUtil {
    * Manually implemented because it is too complex for a template.
    */
   public void ForStmt.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print("for (");
     if (getNumInitStmt() > 0) {
       if (getInitStmt(0) instanceof ExprStmt) {
@@ -154,6 +157,7 @@ aspect PrettyPrintUtil {
   }
 
   public void IfStmt.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print("if (");
     out.print(getCondition());
     out.print(") ");
@@ -184,6 +188,7 @@ aspect PrettyPrintUtil {
   }
 
   public void WhileStmt.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print("while (");
     out.print(getCondition());
     out.print(") ");
diff --git a/java5/frontend/PrettyPrint.jadd b/java5/frontend/PrettyPrint.jadd
index 3aa6614..c8057b0 100644
--- a/java5/frontend/PrettyPrint.jadd
+++ b/java5/frontend/PrettyPrint.jadd
@@ -33,6 +33,7 @@
  */
 aspect Java5PrettyPrint {
   public void Annotation.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print("@");
     out.print(getAccess());
     if (hasElementValuePair()) {
@@ -47,6 +48,7 @@ aspect Java5PrettyPrint {
     }
   }
   public void AnnotationDecl.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print(getModifiers());
     out.print("@interface ");
     out.print(getID());
@@ -66,6 +68,7 @@ aspect Java5PrettyPrint {
     out.print("}");
   }
   public void AnnotationMethodDecl.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     if (hasDocComment()) {
       out.print(docComment());
     }
@@ -84,9 +87,11 @@ aspect Java5PrettyPrint {
     out.print(";");
   }
   public void ElementAnnotationValue.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print(getAnnotation());
   }
   public void ElementArrayValue.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print("{ ");
     out.join(getElementValueList(), new PrettyPrinter.Joiner() {
       @Override
@@ -97,14 +102,17 @@ aspect Java5PrettyPrint {
     out.print(" }");
   }
   public void ElementConstantValue.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print(getExpr());
   }
   public void ElementValuePair.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print(getName());
     out.print(" = ");
     out.print(getElementValue());
   }
   public void EnumConstant.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print(getModifiers());
     out.print(getID());
     if (hasBodyDecl()) {
@@ -143,6 +151,7 @@ aspect Java5PrettyPrint {
     }
   }
   public void GenericClassDecl.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     if (hasDocComment()) {
       out.print(docComment());
     }
@@ -189,6 +198,7 @@ aspect Java5PrettyPrint {
     out.print("}");
   }
   public void GenericConstructorDecl.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     if (!isImplicitConstructor()) {
       if (hasDocComment()) {
         out.print(docComment());
@@ -245,6 +255,7 @@ aspect Java5PrettyPrint {
     }
   }
   public void GenericInterfaceDecl.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     if (hasDocComment()) {
       out.print(docComment());
     }
@@ -287,6 +298,7 @@ aspect Java5PrettyPrint {
     out.print("}");
   }
   public void GenericMethodDecl.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     if (hasDocComment()) {
       out.print(docComment());
     }
@@ -330,6 +342,7 @@ aspect Java5PrettyPrint {
     }
   }
   public void ParTypeAccess.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print(getTypeAccess());
     out.print("<");
     out.join(getTypeArgumentList(), new PrettyPrinter.Joiner() {
@@ -341,18 +354,23 @@ aspect Java5PrettyPrint {
     out.print(">");
   }
   public void SingleStaticImportDecl.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print("import static ");
     out.print(getAccess());
     out.print(".");
     out.print(getID());
     out.print(";");
+    out.println();
   }
   public void StaticImportOnDemandDecl.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print("import static ");
     out.print(getAccess());
     out.print(".*;");
+    out.println();
   }
   public void TypeVariable.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print(getID());
     if (hasTypeBound()) {
       out.print(" extends ");
@@ -365,19 +383,23 @@ aspect Java5PrettyPrint {
     }
   }
   public void VariableArityParameterDeclaration.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print(getModifiers());
     out.print(getTypeAccess());
     out.print("... ");
     out.print(getID());
   }
   public void Wildcard.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print("?");
   }
   public void WildcardExtends.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print("? extends ");
     out.print(getAccess());
   }
   public void WildcardSuper.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print("? super ");
     out.print(getAccess());
   }
diff --git a/java7/frontend/PrettyPrint.jadd b/java7/frontend/PrettyPrint.jadd
index c8bac86..a48f7f9 100644
--- a/java7/frontend/PrettyPrint.jadd
+++ b/java7/frontend/PrettyPrint.jadd
@@ -33,6 +33,7 @@
  */
 aspect Java7PrettyPrint {
   public void CatchParameterDeclaration.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print(getModifiers());
     out.join(getTypeAccessList(), new PrettyPrinter.Joiner() {
       @Override
@@ -44,16 +45,19 @@ aspect Java7PrettyPrint {
     out.print(getID());
   }
   public void DiamondAccess.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print(getTypeAccess());
     out.print("<>");
   }
   public void MultiCatch.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print("catch (");
     out.print(getParameter());
     out.print(") ");
     out.print(getBlock());
   }
   public void ResourceDeclaration.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print(getTypeAccess());
     out.print(" ");
     out.print(getID());
@@ -64,8 +68,10 @@ aspect Java7PrettyPrint {
     }
   }
   public void StandInMethodDecl.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
   }
   public void TryWithResources.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print("try (");
     out.join(getResourceList(), new PrettyPrinter.Joiner() {
       @Override
diff --git a/java8/frontend/PrettyPrint.jadd b/java8/frontend/PrettyPrint.jadd
index 84c5e34..b4dded9 100644
--- a/java8/frontend/PrettyPrint.jadd
+++ b/java8/frontend/PrettyPrint.jadd
@@ -33,13 +33,16 @@
  */
 aspect Java8PrettyPrint {
   public void ArrayReference.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print(getTypeAccess());
     out.print("::new");
   }
   public void BlockLambdaBody.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print(getBlock());
   }
   public void ClassReference.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print(getTypeAccess());
     out.print("::");
     if (hasTypeArgument()) {
@@ -55,6 +58,7 @@ aspect Java8PrettyPrint {
     out.print("new");
   }
   public void DeclaredLambdaParameters.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print("(");
     out.join(getParameters(), new PrettyPrinter.Joiner() {
       @Override
@@ -65,9 +69,11 @@ aspect Java8PrettyPrint {
     out.print(")");
   }
   public void ExprLambdaBody.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print(getExpr());
   }
   public void ExprMethodReference.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print(getExpr());
     out.print("::");
     if (hasTypeArgument()) {
@@ -83,6 +89,7 @@ aspect Java8PrettyPrint {
     out.print(name());
   }
   public void InferredLambdaParameters.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print("(");
     out.join(getParameters(), new PrettyPrinter.Joiner() {
       @Override
@@ -93,9 +100,11 @@ aspect Java8PrettyPrint {
     out.print(")");
   }
   public void InferredParameterDeclaration.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print(name());
   }
   public void IntersectionCastExpr.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print("(");
     out.print(getTypeAccess());
     if (hasTypeList()) {
@@ -111,11 +120,13 @@ aspect Java8PrettyPrint {
     out.print(getExpr());
   }
   public void LambdaExpr.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print(getLambdaParameters());
     out.print(" -> ");
     out.print(getLambdaBody());
   }
   public void TypeMethodReference.prettyPrint(PrettyPrinter out) {
+    if (isVirtualNode()) { printVirtualNode(out); return; }
     out.print(getTypeAccess());
     out.print("::");
     if (hasTypeArgument()) {
diff --git a/pretty-print/Java4PrettyPrint.tt b/pretty-print/Java4PrettyPrint.tt
index be49b88..3050f2c 100644
--- a/pretty-print/Java4PrettyPrint.tt
+++ b/pretty-print/Java4PrettyPrint.tt
@@ -194,7 +194,8 @@ ArrayInit [[{ $join(InitList,", ") }]]
 ArrayCreationExpr [[new $TypeAccess$if(hasArrayInit) $ArrayInit$endif]]
 
 ClassInstanceExpr [[new $Access($join(ArgList,", "))$if(hasTypeDecl)$if(hasPrintableBodyDecl) {
-  $join(#bodyDecls,"\n")}$else { }$endif$endif]]
+  $join(#bodyDecls,"\n\n")
+  }$else { }$endif$endif]]
 
 InstanceOfExpr [[$Expr instanceof $TypeAccess]]
 
diff --git a/pretty-print/Java5PrettyPrint.tt b/pretty-print/Java5PrettyPrint.tt
index 08b68f5..4891502 100644
--- a/pretty-print/Java5PrettyPrint.tt
+++ b/pretty-print/Java5PrettyPrint.tt
@@ -82,8 +82,10 @@ Wildcard [[?]]
 WildcardExtends [[? extends $Access]]
 WildcardSuper [[? super $Access]]
 
-SingleStaticImportDecl [[import static $Access.$ID;]]
-StaticImportOnDemandDecl [[import static $Access.*;]]
+SingleStaticImportDecl [[import static $Access.$ID;
+]]
+StaticImportOnDemandDecl [[import static $Access.*;
+]]
 
 VariableArityParameterDeclaration [[$Modifiers$TypeAccess... $ID]]
 
diff --git a/pretty-print/gen.sh b/pretty-print/gen.sh
index 5514fd6..1696eaf 100755
--- a/pretty-print/gen.sh
+++ b/pretty-print/gen.sh
@@ -1,25 +1,13 @@
 #!/bin/bash
 # Re-generates the pretty printing aspect code.
-# This script clones the aspectgen tool, builds it, and then runs it on the template files (.tt).
 
 set -eu
 
-if [ ! -d "aspectgen" ]; then
-	echo "Cloning Aspect Generator..."
-	git clone --recursive https://bitbucket.org/joqvist/aspectgen
-fi
-
-ASPECTGEN="aspectgen/aspectgen.jar"
-if [ ! -e "aspectgen/aspectgen.jar" ]; then
-	echo "Building Aspect Generator..."
-	(cd aspectgen; gradle jar)
-fi
-
+ASPECTGEN="../../aspectgen/aspectgen.jar"
 if [ ! -e "$ASPECTGEN" ]; then
     echo "Error: $ASPECTGEN is missing!"
     exit 1
 fi
-
 for JAVA_VERSION in {4,5,7,8}; do
 	echo "Generating Java ${JAVA_VERSION} pretty printing aspect..."
 	java -jar "$ASPECTGEN" -aspect "Java${JAVA_VERSION}PrettyPrint" Header.tt \
diff --git a/src/frontend/org/jastadd/util/PrettyPrinter.java b/src/frontend/org/jastadd/util/PrettyPrinter.java
index 7793c1b..9705a82 100644
--- a/src/frontend/org/jastadd/util/PrettyPrinter.java
+++ b/src/frontend/org/jastadd/util/PrettyPrinter.java
@@ -33,6 +33,8 @@ import java.io.PrintStream;
 import java.util.ArrayList;
 import java.util.Stack;
 
+import org.extendj.ast.ASTNode;
+
 /**
  * @author Jesper Öqvist <jesper.oqvist@cs.lth.se>
  */
@@ -95,6 +97,13 @@ public class PrettyPrinter {
     out.print(str);
   }
 
+  /**
+   * Prints the given {@link String} {@code str} without adding any indentation.
+   */
+  public void printNoIndent(String str) {
+    out.print(str);
+  }
+
   /**
    *
    */
@@ -150,6 +159,11 @@ public class PrettyPrinter {
 
   /** Concatenate a list of pretty-printable items, without a separator. */
   public final void join(Iterable<? extends PrettyPrintable> list) {
+    if (list instanceof ASTNode && ((ASTNode) list).isVirtualNode()) {
+        ((ASTNode) list).printVirtualNode(this);
+        return;
+    }
+
     for (PrettyPrintable item : list) {
       print(item);
     }
@@ -157,6 +171,11 @@ public class PrettyPrinter {
 
   /** Concatenate a list of pretty-printable items with a separator. */
   public final void join(Iterable<? extends PrettyPrintable> list, Joiner joiner) {
+    if (list instanceof ASTNode && ((ASTNode) list).isVirtualNode()) {
+        ((ASTNode) list).printVirtualNode(this);
+        return;
+    }
+
     boolean first = true;
     for (PrettyPrintable item : list) {
       if (!first) {
